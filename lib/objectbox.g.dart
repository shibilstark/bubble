// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/auth/db/entities/user_account_entity.dart';
import 'data/user/db/db/entities/user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7008400369325253557),
      name: 'AuthEntity',
      lastPropertyId: const IdUid(5, 2397116429298870973),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4987098030858274074),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7728571753575928523),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6754301773756661303),
            name: 'expireAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8609179580368626819),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2397116429298870973),
            name: 'isEmailVerified',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 127746425928388546),
      name: 'UserEntity',
      lastPropertyId: const IdUid(10, 5521679416388959428),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3266279019822794391),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4926645332519736856),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7458739420888580827),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5114619447406939015),
            name: 'bio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8326514452915953554),
            name: 'statusText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7328507192828485993),
            name: 'profilePic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6679687984454882231),
            name: 'coverPic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8993951076519715365),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4323039467784557189),
            name: 'isOnline',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5521679416388959428),
            name: 'groupIds',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 127746425928388546),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AuthEntity: EntityDefinition<AuthEntity>(
        model: _entities[0],
        toOneRelations: (AuthEntity object) => [],
        toManyRelations: (AuthEntity object) => {},
        getId: (AuthEntity object) => object.id,
        setId: (AuthEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AuthEntity object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addInt64(2, object.expireAt.millisecondsSinceEpoch);
          fbb.addOffset(3, emailOffset);
          fbb.addBool(4, object.isEmailVerified);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AuthEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              expireAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              isEmailVerified: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false));

          return object;
        }),
    UserEntity: EntityDefinition<UserEntity>(
        model: _entities[1],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {},
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final userNameOffset = fbb.writeString(object.userName);
          final bioOffset = fbb.writeString(object.bio);
          final statusTextOffset = fbb.writeString(object.statusText);
          final profilePicOffset = fbb.writeString(object.profilePic);
          final coverPicOffset = fbb.writeString(object.coverPic);
          final emailOffset = fbb.writeString(object.email);
          final groupIdsOffset = fbb.writeList(
              object.groupIds.map(fbb.writeString).toList(growable: false));
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, userNameOffset);
          fbb.addOffset(3, bioOffset);
          fbb.addOffset(4, statusTextOffset);
          fbb.addOffset(5, profilePicOffset);
          fbb.addOffset(6, coverPicOffset);
          fbb.addOffset(7, emailOffset);
          fbb.addBool(8, object.isOnline);
          fbb.addOffset(9, groupIdsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              userName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              bio: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              statusText: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              profilePic: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              coverPic: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              isOnline: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false),
              groupIds: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 22, []));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AuthEntity] entity fields to define ObjectBox queries.
class AuthEntity_ {
  /// see [AuthEntity.id]
  static final id =
      QueryIntegerProperty<AuthEntity>(_entities[0].properties[0]);

  /// see [AuthEntity.uid]
  static final uid =
      QueryStringProperty<AuthEntity>(_entities[0].properties[1]);

  /// see [AuthEntity.expireAt]
  static final expireAt =
      QueryIntegerProperty<AuthEntity>(_entities[0].properties[2]);

  /// see [AuthEntity.email]
  static final email =
      QueryStringProperty<AuthEntity>(_entities[0].properties[3]);

  /// see [AuthEntity.isEmailVerified]
  static final isEmailVerified =
      QueryBooleanProperty<AuthEntity>(_entities[0].properties[4]);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// see [UserEntity.id]
  static final id =
      QueryIntegerProperty<UserEntity>(_entities[1].properties[0]);

  /// see [UserEntity.uid]
  static final uid =
      QueryStringProperty<UserEntity>(_entities[1].properties[1]);

  /// see [UserEntity.userName]
  static final userName =
      QueryStringProperty<UserEntity>(_entities[1].properties[2]);

  /// see [UserEntity.bio]
  static final bio =
      QueryStringProperty<UserEntity>(_entities[1].properties[3]);

  /// see [UserEntity.statusText]
  static final statusText =
      QueryStringProperty<UserEntity>(_entities[1].properties[4]);

  /// see [UserEntity.profilePic]
  static final profilePic =
      QueryStringProperty<UserEntity>(_entities[1].properties[5]);

  /// see [UserEntity.coverPic]
  static final coverPic =
      QueryStringProperty<UserEntity>(_entities[1].properties[6]);

  /// see [UserEntity.email]
  static final email =
      QueryStringProperty<UserEntity>(_entities[1].properties[7]);

  /// see [UserEntity.isOnline]
  static final isOnline =
      QueryBooleanProperty<UserEntity>(_entities[1].properties[8]);

  /// see [UserEntity.groupIds]
  static final groupIds =
      QueryStringVectorProperty<UserEntity>(_entities[1].properties[9]);
}
